{{- $tlsCert := "" }}
{{- $tlsKey := "" }}
{{- if .Values.grafana.tls.enabled }} 
  {{- if .Values.grafana.tls.generateSelfSignedCert }}
    {{- $data := (lookup "v1" "Secret" .Release.Namespace (printf "%s-cert" (include "brigade-metrics.grafana.fullname" . ))).data }}
    {{- if $data }}
      # Reuse the existing cert and key
      {{- $tlsCert = index $data "tls.crt" }}
      {{- $tlsKey = index $data "tls.key" }}
    {{- else }}
      # Generate a new cert and key
      {{- $altName1 := include "brigade-metrics.grafana.fullname" . }}
      {{- $altName2 := printf "%s.%s" (include "brigade-metrics.grafana.fullname" .) .Release.Namespace }}
      {{- $altName3 := printf "%s.%s.svc" (include "brigade-metrics.grafana.fullname" .) .Release.Namespace }}
      {{- $altName4 := printf "%s.%s.svc.cluster" (include "brigade-metrics.grafana.fullname" .) .Release.Namespace }}
      {{- $altName5 := printf "%s.%s.svc.cluster.local" (include "brigade-metrics.grafana.fullname" .) .Release.Namespace }}
      {{- $cert := genSelfSignedCert .Values.grafana.host nil (list .Values.grafana.host $altName1 $altName2 $altName3 $altName4 $altName5) 3650 }}
      {{- $tlsCert = b64enc $cert.Cert }}
      {{- $tlsKey = b64enc $cert.Key }}
    {{- end }}
  {{- else if .Values.grafana.tls.cert }}
    # Use operator supplied cert and key
    {{- $tlsCert = .Values.grafana.tls.cert }}
    {{- $tlsKey = .Values.grafana.tls.key }}
  {{- end }}
{{- end }}
---
{{- if and .Values.grafana.tls.enabled (or .Values.grafana.tls.generateSelfSignedCert .Values.grafana.tls.cert) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "brigade-metrics.grafana.fullname" . }}-cert
  labels:
    {{- include "brigade-metrics.labels" . | nindent 4 }}
    {{- include "brigade-metrics.grafana.labels" . | nindent 4 }}
type: Opaque
data:
  tls.crt: {{ $tlsCert }}
  tls.key: {{ $tlsKey }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "brigade-metrics.grafana.fullname" . }}
  labels:
    {{- include "brigade-metrics.labels" . | nindent 4 }}
    {{- include "brigade-metrics.grafana.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "brigade-metrics.selectorLabels" . | nindent 6 }}
      {{- include "brigade-metrics.grafana.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "brigade-metrics.selectorLabels" . | nindent 8 }}
        {{- include "brigade-metrics.grafana.labels" . | nindent 8 }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/grafana/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/grafana/secret.yaml") . | sha256sum }}
        checksum/nginx-secret: {{ include (print $.Template.BasePath "/grafana/nginx-secret.yaml") . | sha256sum }}
        {{- if and .Values.grafana.tls.enabled (or .Values.grafana.tls.generateSelfSignedCert .Values.grafana.tls.cert) }}
        checksum/tls-cert: {{ sha256sum $tlsCert }}
        checksum/tls-key: {{ sha256sum $tlsKey }}
        {{- end }}
    spec:
      containers:
      - name: grafana
        image: {{ .Values.grafana.image.repository }}:{{ default .Chart.AppVersion .Values.grafana.image.tag }}
        imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
        securityContext:
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        env:
        {{- if .Values.grafana.auth.proxy }}
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: "true"
        {{- end }}
        {{- if .Values.grafana.auth.proxy }}
        - name: GF_SECURITY_ADMIN_USER
          {{- if .Values.grafana.auth.username }}
          value: {{ .Values.grafana.auth.username }}
          {{- else }}
            {{ fail "Value MUST be specified for grafana.auth.username" }}
          {{- end }}
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "brigade-metrics.grafana.fullname" . }}
              key: password
        {{- end }}
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: data
          mountPath: /var/lib/grafana/data
      - name: nginx
        image: {{ .Values.nginx.image.repository }}:{{ default .Chart.AppVersion .Values.nginx.image.tag }}
        imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/
        {{- if .Values.grafana.tls.enabled }}
        - name: cert
          mountPath: /var/lib/nginx/certs
          readOnly: true
        {{- end }}
        ports:
        {{- if .Values.grafana.tls.enabled }}
        - containerPort: 443
          name: https
          protocol: TCP
        {{- else }}
        - containerPort: 80
          name: http
          protocol: TCP
        {{- end }}
      volumes:
      - name: nginx-config
        secret:
          secretName: {{ include "brigade-metrics.nginx.fullname" . }}
      {{- if .Values.grafana.tls.enabled }}
      - name: cert
        secret:
          secretName: {{ include "brigade-metrics.grafana.fullname" . }}-cert
      {{- end }}
      - name: grafana-datasources
        configMap:
          name: {{ include "brigade-metrics.grafana.fullname" . }}-datasources
      - name: data
        {{- if .Values.grafana.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "brigade-metrics.grafana.fullname" . }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      securityContext:
        fsGroup: 472
      {{- with .Values.grafana.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.grafana.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

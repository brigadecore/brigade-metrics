{{- if and .Values.grafana.ingress.enabled .Values.grafana.ingress.tls.enabled (or .Values.grafana.ingress.tls.generateSelfSignedCert .Values.grafana.ingress.tls.cert) }}
{{- $tlsCert := "" }}
{{- $tlsKey := "" }}
{{- if .Values.grafana.ingress.tls.generateSelfSignedCert }}
  {{- $data := (lookup "v1" "Secret" .Release.Namespace (printf "%s-ingress-cert" (include "brigade-metrics.grafana.fullname" . ))).data }}
  {{- if $data }}
    # Reuse the existing cert and key
    {{- $tlsCert = index $data "tls.crt" }}
    {{- $tlsKey = index $data "tls.key" }}
  {{- else }}
    # Generate a new cert and key
    {{- $cert := genSelfSignedCert .Values.grafana.host nil (list .Values.grafana.host) 3650 }}
    {{- $tlsCert = b64enc $cert.Cert }}
    {{- $tlsKey = b64enc $cert.Key }}
  {{- end }}
{{- else if .Values.grafana.ingress.tls.cert }}
  # Use operator supplied cert and key
  {{- $tlsCert = .Values.grafana.ingress.tls.cert }}
  {{- $tlsKey = .Values.grafana.ingress.tls.key }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "brigade-metrics.grafana.fullname" . }}-ingress-cert
  labels:
    {{- include "brigade-metrics.labels" . | nindent 4 }}
    {{- include "brigade-metrics.grafana.labels" . | nindent 4 }}
type: Opaque
data:
  tls.crt: {{ $tlsCert }}
  tls.key: {{ $tlsKey }}
{{- end }}
